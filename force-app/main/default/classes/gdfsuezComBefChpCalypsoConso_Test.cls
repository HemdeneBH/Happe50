/*
*@Author: Eloi Dereeper (Generated by wsdl2apex)
*@Description: Classe test, provisoirement simple complément des classes test "'VI_SM" 017 à 020 et 023 pour la couverture de gdfsuezComBefChpCalypsoConsommation
*@CreatedDate: 12/11/2020
*@LastModified: 14/11/2020
*/
@isTest
public class gdfsuezComBefChpCalypsoConso_Test {
    
    @isTest
    public static void completeCoverage(){
        
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommation_element a = new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommation_element();
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt b = new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt();
        gdfsuezComBefChpCalypsoConsommation.donneesConsultationDt c = new gdfsuezComBefChpCalypsoConsommation.donneesConsultationDt();
        gdfsuezComBefChpCalypsoConsommation.criteresConsultationDt d = new gdfsuezComBefChpCalypsoConsommation.criteresConsultationDt();
        gdfsuezComBefChpCalypsoConsommation.remiseDt e = new gdfsuezComBefChpCalypsoConsommation.remiseDt();
        gdfsuezComBefChpCalypsoConsommation.frigoDt f = new gdfsuezComBefChpCalypsoConsommation.frigoDt();
        gdfsuezComBefChpCalypsoConsommation.consommationDt g = new gdfsuezComBefChpCalypsoConsommation.consommationDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationReponse_element h = new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationReponse_element();
        gdfsuezComBefChpCalypsoConsommation.factureAbonnementDt i = new gdfsuezComBefChpCalypsoConsommation.factureAbonnementDt();
        gdfsuezComBefChpCalypsoConsommation.periodeConsommationDt j = new gdfsuezComBefChpCalypsoConsommation.periodeConsommationDt();
        
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationOutputDt k = new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationOutputDt();
        gdfsuezComBefChpCalypsoConsommation.eclairageDt l = new gdfsuezComBefChpCalypsoConsommation.eclairageDt();
        gdfsuezComBefChpCalypsoConsommation.taxesDt m = new gdfsuezComBefChpCalypsoConsommation.taxesDt();
        gdfsuezComBefChpCalypsoConsommation.climDt n = new gdfsuezComBefChpCalypsoConsommation.climDt();
        gdfsuezComBefChpCalypsoConsommation.abonnementDt o = new gdfsuezComBefChpCalypsoConsommation.abonnementDt();
        gdfsuezComBefChpCalypsoConsommation.estimationPuissanceDt p = new gdfsuezComBefChpCalypsoConsommation.estimationPuissanceDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommation_element q = new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommation_element();
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationOutputDt r = new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationOutputDt();
        gdfsuezComBefChpCalypsoConsommation.equipementDt s = new gdfsuezComBefChpCalypsoConsommation.equipementDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt t = new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt();
        gdfsuezComBefChpCalypsoConsommation.donneesPDLDt u = new gdfsuezComBefChpCalypsoConsommation.donneesPDLDt();
        
        gdfsuezComBefChpCalypsoConsommation.cadranDt v = new gdfsuezComBefChpCalypsoConsommation.cadranDt();
        gdfsuezComBefChpCalypsoConsommation.periodeAbonnementDt w= new gdfsuezComBefChpCalypsoConsommation.periodeAbonnementDt();
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationReponse_element x= new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationReponse_element();
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort gdfsuezComBefChpCalypsoConsommationd=new gdfsuezComBefChpCalypsoConsommation.ConsommationPort();
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationInputDt input=new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationInputDt();
        gdfsuezComBefChpPivot.contextDt context=new gdfsuezComBefChpPivot.contextDt();
        gdfsuezComBefChpCalypsoConsommationd.PreconiserRepartitionHPHCConsommation(input,context);
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt PreconiserPuissanceConsommationInput=new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt ();
        gdfsuezComBefChpCalypsoConsommationd.PreconiserPuissanceConsommation(PreconiserPuissanceConsommationInput,context);
        
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeurInputDt PreconiserRepartitionCadransDistributeurInputDt=new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeurInputDt();
        gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationInputDt EstimerGazConsommationInputDt=new gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationInputDt();        
        gdfsuezComBefChpCalypsoConsommationd.EstimerGazConsommation(EstimerGazConsommationInputDt,context);
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt ConsulterConsommationInputDt=new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt();      
        gdfsuezComBefChpCalypsoConsommationd.ConsulterConsommation(ConsulterConsommationInputDt,context);
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationInputDt PreconiserRepartition3cadransConsommationInputDt=new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationInputDt();  
        gdfsuezComBefChpCalypsoConsommationd.PreconiserRepartition3cadransConsommation(PreconiserRepartition3cadransConsommationInputDt,context);
        gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationInputDt EstimerElecConsommationInputDt=new gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationInputDt();  
        gdfsuezComBefChpCalypsoConsommationd.EstimerElecConsommation(EstimerElecConsommationInputDt,context);
        
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommation_element gdfsuezComBefChpCalypsoConsommation_Test=new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommation_element();
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt ConsulterConsommationInputDt_Test=new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationInputDt();
        gdfsuezComBefChpCalypsoConsommation.donneesConsultationDt donneesConsultationDt_Test=new gdfsuezComBefChpCalypsoConsommation.donneesConsultationDt();
        gdfsuezComBefChpCalypsoConsommation.criteresConsultationDt criteresConsultationDt_Test=new gdfsuezComBefChpCalypsoConsommation.criteresConsultationDt();
        gdfsuezComBefChpCalypsoConsommation.remiseDt remiseDt_Test=new gdfsuezComBefChpCalypsoConsommation.remiseDt();
        gdfsuezComBefChpCalypsoConsommation.frigoDt frigoDt_Test=new gdfsuezComBefChpCalypsoConsommation.frigoDt();
        gdfsuezComBefChpCalypsoConsommation.consommationDt consommationDt_Test=new gdfsuezComBefChpCalypsoConsommation.consommationDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationReponse_element PreconiserPuissanceConsommationReponse_element_Test=new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationReponse_element();
        gdfsuezComBefChpCalypsoConsommation.factureAbonnementDt factureAbonnementDt_Test=new gdfsuezComBefChpCalypsoConsommation.factureAbonnementDt();
        gdfsuezComBefChpCalypsoConsommation.periodeConsommationDt periodeConsommationDt_Test=new gdfsuezComBefChpCalypsoConsommation.periodeConsommationDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationOutputDt PreconiserPuissanceConsommationOutputDtTest=new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationOutputDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeurReponse_element PreconiserRepartitionCadransDistributeurReponse_elemen_Test=new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeurReponse_element();
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeur_element PreconiserRepartitionCadransDistributeur_element_Test=new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionCadransDistributeur_element();
        gdfsuezComBefChpCalypsoConsommation.eclairageDt eclairageDt_Test=new gdfsuezComBefChpCalypsoConsommation.eclairageDt();
        gdfsuezComBefChpCalypsoConsommation.taxesDt taxesDt_Test=new gdfsuezComBefChpCalypsoConsommation.taxesDt();
        gdfsuezComBefChpCalypsoConsommation.climDt climDt_Test=new gdfsuezComBefChpCalypsoConsommation.climDt();
        gdfsuezComBefChpCalypsoConsommation.abonnementDt abonnementDt_Test=new gdfsuezComBefChpCalypsoConsommation.abonnementDt();
        gdfsuezComBefChpCalypsoConsommation.estimationPuissanceDt estimationPuissanceDt_Test=new gdfsuezComBefChpCalypsoConsommation.estimationPuissanceDt();
        gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationOutputDt ConsulterConsommationOutputD_Test=new gdfsuezComBefChpCalypsoConsommation.ConsulterConsommationOutputDt();
        gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt PreconiserPuissanceConsommationInputDt_Test=new gdfsuezComBefChpCalypsoConsommation.PreconiserPuissanceConsommationInputDt();
        gdfsuezComBefChpCalypsoConsommation.donneesPDLDt donneesPDLDt_Test=new gdfsuezComBefChpCalypsoConsommation.donneesPDLDt();
        gdfsuezComBefChpCalypsoConsommation.cadranDt cadran =new gdfsuezComBefChpCalypsoConsommation.cadranDt();
    }
    
    @isTest
    static void testMethod2(){
        Decimal estimerGazSuccess = estimerGaz('1994', '23', '020', '010', 2, 23, '020', '010', '020', '010','010', 'VI', '3', 'callout:AuthOctopus');
        system.assertEquals(1000, estimerGazSuccess);
    }
    
    @isTest
    static void testMethod3(){
        Decimal estimerElecSuccess = estimerElec('1994', '23', '020', '010', 2, 34, '020', '010', '020', '010', '020', true,true,true,true, 'VI', '3', 'callout:AuthOctopus');
        
        System.assertEquals(4415, estimerElecSuccess);
        
        
        Decimal estimerElecErreur = estimerElec('', '', '', '', 2, 34, '', '', '', '', '', true,true,true,true,'VI', '3', 'callout:AuthOctopus');
        
        System.assertEquals(null, estimerElecErreur); 
        
    }
    
    @isTest
    static void testmethod4(){
        getRepartitionHPHC('020', '010', '010', '020', 'VI', '3', 'callout:AuthOctopus');
        preconiser3cadrans('020', '010', '010', '020', 'VI', '3', 'callout:AuthOctopus');
    }
    
    public static gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationReponse_element EstimerGazConsommation_HTTP(
        gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationInputDt EstimerGazConsommationInput,gdfsuezComBefChpPivot.contextDt context,
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port){
            
            DOM.Document doc = new DOM.Document();
            DOM.XmlNode body = VI_UTIL005_OctopusCalloutUtils.populateDocConso(doc);
            DOM.XmlNode methodNode = body.addChildElement('EstimerGazConsommation', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3', '');
            
            gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommation_element request_x = 
                new gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommation_element();
            request_x.EstimerGazConsommationInput = EstimerGazConsommationInput;
            request_x.context = context;
            request_x.populateXmlNode(methodNode);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(port.endpoint_x);
            //req.setClientCertificateName(Label.SM_CL_OctopusCertificate);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'text/xml');
            req.setHeader('SOAPAction', 'tns:EstimerGazConsommation');
            if(port.timeout_x != null){
                req.setTimeout(port.timeout_x);
            }
            req.setBodyDocument(doc);
            
            System.debug('EDE debug, req XML body : ' + doc.toXmlString());
            
            Http http = new Http();
            HTTPResponse res = http.send(req);
            Dom.Document responseDoc = res.getBodyDocument();
            Dom.XmlNode rootNode = responseDoc.getRootElement();
            Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
            Dom.XmlNode EstimerGazConsommationReponseNode = bodyNode.getChildElement('EstimerGazConsommationReponse', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3');
            
            gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationReponse_element reponse_x = 
                new gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationReponse_element(EstimerGazConsommationReponseNode);
            
            return reponse_x;
        }
    
    public static Decimal estimerGaz( String anneeConstructionInput, String codeRegion, String energieChauffageCode, String energieECSCode, Integer nbrPersonnesFoyer, Integer surface, 
                                     String typeChauffageCode, String typeECSCode, String energieCuissonCode, String typeLogementCode,string typeResidenceCode, String ctxt, String version, String NamedCredentialName){  
                                         gdfsuezComBefChpPivot.contextDt context = VI_UTIL005_OctopusCalloutUtils.initContext(ctxt, version, true);
                                         gdfsuezComBefChpCalypsoConsommation.ConsommationPort port = VI_UTIL005_OctopusCalloutUtils.initConsommationPort(NamedCredentialName);
                                         // Input de la méthode :
                                         gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationInputDt input  = new gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationInputDt();
                                         //sauvegardeDt contenu dans l'input
                                         gdfsuezComBefChpCalypsoConsommation.sauvegardeDt sauvegarde = new gdfsuezComBefChpCalypsoConsommation.sauvegardeDt();
                                         sauvegarde.entree = false;
                                         sauvegarde.sortie = false;
                                         input.sauvegarde = sauvegarde;
                                         
                                         // localDt contenu dans l'input
                                         gdfsuezComBefChpCalypsoConsommation.localDt local = new gdfsuezComBefChpCalypsoConsommation.localDt();
                                         
                                         // Elements définissables dans local :
                                         gdfsuezComBefChpCalypsoConsommation.OccupationDt occupation = new gdfsuezComBefChpCalypsoConsommation.OccupationDt();
                                         gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements listeEquipements = new gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements();
                                         gdfsuezComBefChpPivot.listeValeursDt anneeConstruction = VI_UTIL005_OctopusCalloutUtils.initValue(anneeConstructionInput);
                                         gdfsuezComBefChpPivot.listeValeursDt codePostal = VI_UTIL005_OctopusCalloutUtils.initValue(codeRegion);
                                         gdfsuezComBefChpPivot.listeValeursDt typeLogement = VI_UTIL005_OctopusCalloutUtils.initValue(typeLogementCode);
                                         gdfsuezComBefChpPivot.listeValeursDt typeResidence = VI_UTIL005_OctopusCalloutUtils.initValue(typeResidenceCode);
                                         
                                         // Element définssable dans occupation :
                                         occupation.nombrePersonnesFoyer = nbrPersonnesFoyer;
                                         occupation.typeResidence = typeResidence;
                                         
                                         // Elements définissables dans listeEquipements : 
                                         gdfsuezComBefChpCalypsoConsommation.chauffageDt chauffage = new gdfsuezComBefChpCalypsoConsommation.chauffageDt();
                                         gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt eauChaudeSanitaire = new gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt();
                                         gdfsuezComBefChpCalypsoConsommation.cuissonDt cuisson = new gdfsuezComBefChpCalypsoConsommation.cuissonDt();
                                         
                                         // Elements définissables dans chauffage : 
                                         gdfsuezComBefChpPivot.listeValeursDt energieChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(energieChauffageCode);
                                         gdfsuezComBefChpPivot.listeValeursDt typeChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(typeChauffageCode);
                                         
                                         // Elements définissables dans eauChaudeSanitaire : 
                                         gdfsuezComBefChpPivot.listeValeursDt energieECS = VI_UTIL005_OctopusCalloutUtils.initValue(energieECSCode);
                                         gdfsuezComBefChpPivot.listeValeursDt typeECS = VI_UTIL005_OctopusCalloutUtils.initValue(typeECSCode);
                                         
                                         // Elements définissables dans cuisson : 
                                         gdfsuezComBefChpPivot.listeValeursDt energieCuisson = VI_UTIL005_OctopusCalloutUtils.initValue(energieCuissonCode);
                                         
                                         cuisson.energieCuisson = energieCuisson;
                                         chauffage.energieChauffage = energieChauffage;
                                         chauffage.typeChauffage = typeChauffage;
                                         eauChaudeSanitaire.energieECS = energieECS;
                                         eauChaudeSanitaire.typeECS = typeECS;
                                         listeEquipements.cuisson = cuisson;
                                         listeEquipements.chauffage = chauffage;
                                         listeEquipements.eauChaudeSanitaire = eauChaudeSanitaire;
                                         local.occupation = occupation;
                                         local.listeEquipements = listeEquipements;
                                         local.surface = surface;
                                         local.anneeConstruction = anneeConstruction;
                                         local.codePostal = codePostal;
                                         local.typeLogement = typeLogement;
                                         input.local = local;
                                         
                                         gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationReponse_element reponse = 
                                             new gdfsuezComBefChpCalypsoConsommation.EstimerGazConsommationReponse_element();
                                         
                                         if(!Test.isRunningTest()){ 
                                             reponse = EstimerGazConsommation_HTTP(input,context, port);
                                         }
                                         else{
                                             // TODO : définir les mocks pour la classe test
                                             Test.setMock(HttpCalloutMock.class, new VI_SM019_EstimerGazConsommation_Mock());
                                             gdfsuezComBefChpCalypsoConsommation.ConsommationPort porttest = new  gdfsuezComBefChpCalypsoConsommation.ConsommationPort();
                                             reponse = EstimerGazConsommation_HTTP(input, context, porttest);
                                         }
                                         
                                         if(reponse != null && reponse.EstimerGazConsommationzOutput != null && reponse.EstimerGazConsommationzOutput.estimationConso != null){
                                             gdfsuezComBefChpCalypsoConsommation.estimationConsoDt estimationConso = reponse.EstimerGazConsommationzOutput.estimationConso;
                                             return estimationConso.consommationEstimee;
                                         }
                                         else if(reponse != null && reponse.messageRetours != null && reponse.messageRetours.retourTraitementMessage != null ){ 
                                             for (gdfsuezComBefChpPivot.retourTraitementMessageDt message : reponse.messageRetours.retourTraitementMessage){
                                                 if ('Erreur'.equals(message.type_x)){
                                                     break;
                                                 }
                                             }    
                                         }
                                         return null;
                                     }
    
    public static Decimal getEstimationElec(String anneeConstruction, String codePostal, String energieChauffage, String energieECS, 
                                            Integer nbrPersonnesFoyer, Integer surface, String typeChauffage,
                                            String typeECS, String typeLogement, String typeResidence, String energieCuisson, Boolean laveLingExists,
                                            Boolean congelateurExists, Boolean laveVaisselleExists,Boolean secheLingeExists){
                                                Decimal EstimationElec; 
                                                String anneeConstructionInput = anneeConstruction;
                                                String energieChauffageCode = energieChauffage;
                                                String typeChauffageCode = typeChauffage;
                                                String energieECSCode = energieECS;
                                                String typeECSCode = typeECS;   
                                                String typeLogementCode = typeLogement;
                                                String typeResidenceCode = typeResidence;
                                                String energieCuissonCode = energieCuisson;                                       
                                                EstimationElec = estimerElec(anneeConstructionInput, codePostal,  energieChauffageCode,  energieECSCode,  nbrPersonnesFoyer,  surface, 
                                                                             typeChauffageCode,  typeECSCode,  typeLogementCode,  typeResidenceCode, energieCuissonCode, 
                                                                             laveLingExists,congelateurExists,  laveVaisselleExists, secheLingeExists, 'VI', 'V3', 'callout:VI_AuthOctopus');
                                                System.debug('### END getEstimationElec - EstimationElec : ' + EstimationElec);
                                                return EstimationElec;
                                            }
    
    public static Decimal estimerElec(String anneeConstructionInput, String codeRegion, String energieChauffageCode, String energieECSCode, Integer nbrPersonnesFoyer, Integer surface, 
                                      String typeChauffageCode, String typeECSCode, String typeLogementCode, String typeResidenceCode, String energieCuissonCode,Boolean laveLingExists,
                                      Boolean congelateurExists, Boolean laveVaisselleExists,Boolean secheLingeExists,String ctxt, String version,
                                      String NamedCredentialName){
                                          
                                          gdfsuezComBefChpPivot.contextDt context = VI_UTIL005_OctopusCalloutUtils.initContext(ctxt, version, true);
                                          gdfsuezComBefChpCalypsoConsommation.ConsommationPort port = VI_UTIL005_OctopusCalloutUtils.initConsommationPort(NamedCredentialName);
                                          system.debug(port);
                                          // Input de la méthode :
                                          gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationInputDt input  = new gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationInputDt();
                                          //sauvegardeDt contenu dans l'input
                                          gdfsuezComBefChpCalypsoConsommation.sauvegardeDt sauvegardeZoneAgile = new gdfsuezComBefChpCalypsoConsommation.sauvegardeDt();
                                          sauvegardeZoneAgile.entree = false;
                                          sauvegardeZoneAgile.sortie = false;
                                          input.sauvegardeZoneAgile = sauvegardeZoneAgile;
                                          
                                          // localDt contenu dans l'input
                                          gdfsuezComBefChpCalypsoConsommation.localDt local = new gdfsuezComBefChpCalypsoConsommation.localDt();
                                          
                                          // Elements définissables dans local :
                                          gdfsuezComBefChpCalypsoConsommation.OccupationDt occupation = new gdfsuezComBefChpCalypsoConsommation.OccupationDt();
                                          gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements listeEquipements = new gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements();
                                          gdfsuezComBefChpPivot.listeValeursDt anneeConstruction = VI_UTIL005_OctopusCalloutUtils.initValue(anneeConstructionInput);
                                          gdfsuezComBefChpPivot.listeValeursDt codePostal = VI_UTIL005_OctopusCalloutUtils.initValue(codeRegion);
                                          gdfsuezComBefChpPivot.listeValeursDt typeLogement = VI_UTIL005_OctopusCalloutUtils.initValue(typeLogementCode);
                                          
                                          // Element définssable dans occupation :
                                          occupation.nombrePersonnesFoyer = nbrPersonnesFoyer;
                                          gdfsuezComBefChpPivot.listeValeursDt typeResidence = VI_UTIL005_OctopusCalloutUtils.initValue(typeResidenceCode);
                                          
                                          // Elements définissables dans listeEquipements : 
                                          gdfsuezComBefChpCalypsoConsommation.chauffageDt chauffage = new gdfsuezComBefChpCalypsoConsommation.chauffageDt();
                                          gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt eauChaudeSanitaire = new gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt();
                                          gdfsuezComBefChpCalypsoConsommation.cuissonDt cuisson = new gdfsuezComBefChpCalypsoConsommation.cuissonDt();
                                          
                                          // Elements définissables dans chauffage : 
                                          gdfsuezComBefChpPivot.listeValeursDt energieChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(energieChauffageCode);
                                          gdfsuezComBefChpPivot.listeValeursDt typeChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(typeChauffageCode);
                                          
                                          // Elements définissables dans eauChaudeSanitaire : 
                                          gdfsuezComBefChpPivot.listeValeursDt energieECS = VI_UTIL005_OctopusCalloutUtils.initValue(energieECSCode);
                                          gdfsuezComBefChpPivot.listeValeursDt typeECS = VI_UTIL005_OctopusCalloutUtils.initValue(typeECSCode);
                                          
                                          // Elements définissables dans cuisson : 
                                          gdfsuezComBefChpPivot.listeValeursDt energieCuisson = VI_UTIL005_OctopusCalloutUtils.initValue(energieCuissonCode);
                                          // Elements                                              
                                          gdfsuezComBefChpCalypsoConsommation.equipementDt laveLinge =  new gdfsuezComBefChpCalypsoConsommation.equipementDt();
                                          laveLinge.present = laveLingExists;
                                          
                                          gdfsuezComBefChpCalypsoConsommation.equipementDt laveVaisselle =  new gdfsuezComBefChpCalypsoConsommation.equipementDt();
                                          laveVaisselle.present = laveVaisselleExists;    
                                          
                                          gdfsuezComBefChpCalypsoConsommation.equipementDt secheLinge =  new gdfsuezComBefChpCalypsoConsommation.equipementDt();
                                          secheLinge.present = secheLingeExists; 
                                          
                                          gdfsuezComBefChpCalypsoConsommation.equipementDt congelateur =  new gdfsuezComBefChpCalypsoConsommation.equipementDt();
                                          congelateur.present = congelateurExists;                                             
                                          
                                          cuisson.energieCuisson = energieCuisson;
                                          chauffage.energieChauffage = energieChauffage;
                                          chauffage.typeChauffage = typeChauffage;
                                          eauChaudeSanitaire.energieECS = energieECS;
                                          eauChaudeSanitaire.typeECS = typeECS;
                                          listeEquipements.cuisson = cuisson;
                                          listeEquipements.chauffage = chauffage;
                                          listeEquipements.laveLinge = laveLinge;
                                          listeEquipements.laveVaisselle = laveVaisselle; 
                                          listeEquipements.secheLinge = secheLinge;
                                          listeEquipements.congelateur = congelateur;                                      
                                          listeEquipements.eauChaudeSanitaire = eauChaudeSanitaire;
                                          occupation.typeResidence = typeResidence;
                                          local.occupation = occupation;
                                          local.listeEquipements = listeEquipements;
                                          local.surface = surface;
                                          local.anneeConstruction = anneeConstruction;
                                          local.codePostal = codePostal;
                                          local.typeLogement = typeLogement;
                                          input.local = local;
                                          
                                          gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationReponse_element reponse = 
                                              new gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationReponse_element();
                                          
                                          if(!Test.isRunningTest()){ 
                                              try{
                                                  reponse = EstimerElecConsommation_HTTP(input,context, port);
                                              }
                                              catch(Exception e){
                                                  return null;
                                              }
                                          }
                                          else{
                                              Test.setMock(HttpCalloutMock.class, new VI_SM020_EstimerElecConsommation_Mock());
                                              gdfsuezComBefChpCalypsoConsommation.ConsommationPort porttest = new  gdfsuezComBefChpCalypsoConsommation.ConsommationPort();
                                              reponse = EstimerElecConsommation_HTTP(input, context, porttest);
                                          }
                                          
                                          
                                          if(reponse != null && reponse.EstimerElecConsommationOutput != null && reponse.EstimerElecConsommationOutput.estimationConso != null
                                             && reponse.EstimerElecConsommationOutput.estimationConso.consommationEstimee != null){
                                                 Integer consommationEstimee = reponse.EstimerElecConsommationOutput.estimationConso.consommationEstimee;
                                                 return consommationEstimee;
                                                 
                                             }
                                          else if(reponse != null && reponse.messageRetours != null && reponse.messageRetours.retourTraitementMessage != null ){ 
                                              for (gdfsuezComBefChpPivot.retourTraitementMessageDt message : reponse.messageRetours.retourTraitementMessage){
                                                  if ('Erreur'.equals(message.type_x)){
                                                      System.debug(message.libelle);
                                                      return null;
                                                  }
                                              }    
                                          }                                    
                                          return null;
                                      }
    
    public static gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationReponse_element EstimerElecConsommation_HTTP(
        gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationInputDt EstimerElecConsommationInput,gdfsuezComBefChpPivot.contextDt context,
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port) {
            
            DOM.Document doc = new DOM.Document();
            DOM.XmlNode body = VI_UTIL005_OctopusCalloutUtils.populateDocConso(doc);
            DOM.XmlNode methodNode = body.addChildElement('EstimerElecConsommation', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3', '');
            
            gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommation_element request_x = 
                new gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommation_element();
            request_x.EstimerElecConsommationInput = EstimerElecConsommationInput;
            request_x.context = context;
            request_x.populateXmlNode(methodNode);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(port.endpoint_x);
            //req.setClientCertificateName(Label.SM_CL_OctopusCertificate);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'text/xml');
            req.setHeader('SOAPAction', 'tns:EstimerElecConsommation');
            if(port.timeout_x != null){
                req.setTimeout(port.timeout_x);
            }
            req.setBodyDocument(doc);
            
            System.debug('EDE debug, req XML body : ' + doc.toXmlString());
            
            Http http = new Http();
            HTTPResponse res = http.send(req);
            System.debug('response status Code : '+res.getStatusCode());
            System.debug('response : '+res.getBody());
            Dom.Document responseDoc = res.getBodyDocument();
            Dom.XmlNode rootNode = responseDoc.getRootElement();
            Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
            Dom.XmlNode EstimerElecConsommationReponseNode = bodyNode.getChildElement('EstimerElecConsommationReponse', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3');
            
            gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationReponse_element reponse_x = 
                new gdfsuezComBefChpCalypsoConsommation.EstimerElecConsommationReponse_element(EstimerElecConsommationReponseNode);
            
            return reponse_x;
        }
    
    public static EstimationHPHC getRepartitionHPHC(String energieChauffageCode, String energieECSCode, String typeChauffageCode, String typeECSCode, String ctxt, String version, String NamedCredentialName){
        
        gdfsuezComBefChpPivot.contextDt context = VI_UTIL005_OctopusCalloutUtils.initContext(ctxt, version, false);
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port = VI_UTIL005_OctopusCalloutUtils.initConsommationPort(NamedCredentialName);
        system.debug(port);
        // Input de la méthode :
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationInputDt input  = new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationInputDt();
        //sauvegardeDt contenu dans l'input
        gdfsuezComBefChpCalypsoConsommation.sauvegardeDt sauvegardeZoneAgile = new gdfsuezComBefChpCalypsoConsommation.sauvegardeDt();
        sauvegardeZoneAgile.entree = false;
        sauvegardeZoneAgile.sortie = false;        
        input.sauvegardeZoneAgile = sauvegardeZoneAgile;
        
        // localDt contenu dans l'input
        gdfsuezComBefChpCalypsoConsommation.localDt local = new gdfsuezComBefChpCalypsoConsommation.localDt();
        //local.idLocal = '1212121212';
        // Avec les paramètres d'entrée disponibles, un seul élément définisable dans "local : "listeEquipements".
        gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements listeEquipements = new gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements();
        
        // Elements définissables dans listeEquipements : 
        gdfsuezComBefChpCalypsoConsommation.chauffageDt chauffage = new gdfsuezComBefChpCalypsoConsommation.chauffageDt();
        gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt eauChaudeSanitaire = new gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt();
        
        // Elements définissables dans chauffage : 
        gdfsuezComBefChpPivot.listeValeursDt energieChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(energieChauffageCode);
        gdfsuezComBefChpPivot.listeValeursDt typeChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(typeChauffageCode);
        
        // Elements définissables dans eauChaudeSanitaire : 
        gdfsuezComBefChpPivot.listeValeursDt energieECS = VI_UTIL005_OctopusCalloutUtils.initValue(energieECSCode);
        gdfsuezComBefChpPivot.listeValeursDt typeECS = VI_UTIL005_OctopusCalloutUtils.initValue(typeECSCode);
        
        chauffage.energieChauffage = energieChauffage;
        chauffage.typeChauffage = typeChauffage;
        eauChaudeSanitaire.energieECS = energieECS;
        eauChaudeSanitaire.typeECS = typeECS;
        listeEquipements.chauffage = chauffage;
        listeEquipements.eauChaudeSanitaire = eauChaudeSanitaire;
        local.listeEquipements = listeEquipements;
        input.local = local;
        
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationReponse_element reponse = 
            new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationReponse_element();
        
        if(!Test.isRunningTest()){ 
            try{
                reponse = PreconiserRepartitionHPHCConsommation_HTTP(input,context, port);
            }
            catch(Exception e){
                System.debug('EDE Debug, erreur : ' + e.getMessage());
                System.debug('EDE Debug, erreur : ' + e.getStackTraceString());
                return null;
            }
        }
        else{
            Test.setMock(HttpCalloutMock.class, new VI_SM017_PrecoRepartitionHPHCConso_Mock());
            gdfsuezComBefChpCalypsoConsommation.ConsommationPort porttest = new  gdfsuezComBefChpCalypsoConsommation.ConsommationPort();
            reponse = PreconiserRepartitionHPHCConsommation_HTTP(input, context, porttest);
        }
        
        System.debug('EDE Debug : reponse = ' + ((reponse == null) ? 'null' : String.valueOf(reponse)));
        System.debug('EDE Debug : PreconiserRepartitionHPHCConsommationOuput = ' + (
            (reponse.PreconiserRepartitionHPHCConsommationOuput == null) ? 'null' : String.valueOf(reponse.PreconiserRepartitionHPHCConsommationOuput)));
        System.debug('EDE Debug : estimationConso = ' + (
            (reponse.PreconiserRepartitionHPHCConsommationOuput.estimationConso == null) ? 'null' : String.valueOf(reponse.PreconiserRepartitionHPHCConsommationOuput.estimationConso)));
        
        if(reponse != null && reponse.PreconiserRepartitionHPHCConsommationOuput != null && reponse.PreconiserRepartitionHPHCConsommationOuput.estimationConso != null){
            gdfsuezComBefChpCalypsoConsommation.repartitionHPHCDt estimationConso = reponse.PreconiserRepartitionHPHCConsommationOuput.estimationConso;
            EstimationHPHC estimation = new EstimationHPHC(estimationConso.cleRepartitionHC, estimationConso.cleRepartitionHP);
            return estimation;
        }
        if(reponse != null && reponse.messageRetours != null && reponse.messageRetours.retourTraitementMessage != null ){ 
            for (gdfsuezComBefChpPivot.retourTraitementMessageDt message : reponse.messageRetours.retourTraitementMessage){
                if ('Erreur'.equals(message.type_x)){
                    return null;
                }
            }    
        }
        
        
        return null;
    }
    
    
    public static gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationReponse_element PreconiserRepartitionHPHCConsommation_HTTP(
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationInputDt PreconiserRepartitionHPHCConsommationInput, gdfsuezComBefChpPivot.contextDt context, 
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port) { 
            
            DOM.Document doc = new DOM.Document();
            DOM.XmlNode body = VI_UTIL005_OctopusCalloutUtils.populateDocConso(doc);
            DOM.XmlNode methodNode = body.addChildElement('PreconiserRepartitionHPHCConsommation', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3', '');
            
            gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommation_element request_x = 
                new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommation_element();
            request_x.PreconiserRepartitionHPHCConsommationInput = PreconiserRepartitionHPHCConsommationInput;
            request_x.context = context;
            request_x.populateXmlNode(methodNode);
            
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(port.endpoint_x);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'text/xml');
            req.setHeader('SOAPAction', 'tns:PreconiserRepartitionHPHCConsommation');
            if(port.timeout_x != null){
                req.setTimeout(port.timeout_x);
            }
            req.setBodyDocument(doc);
            
            System.debug('EDE debug, req XML body : ' + doc.toXmlString());
            
            Http http = new Http();
            HTTPResponse res = http.send(req);
            System.debug('response status Code : '+res.getStatusCode());
            System.debug('response : '+res.getBody());
            Dom.Document responseDoc = res.getBodyDocument();
            Dom.XmlNode rootNode = responseDoc.getRootElement();
            Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
            Dom.XmlNode PreconiserRepartitionHPHCConsommationReponseNode = bodyNode.getChildElement('PreconiserRepartitionHPHCConsommationReponse', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3');
            
            gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationReponse_element reponse_x = 
                new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartitionHPHCConsommationReponse_element(PreconiserRepartitionHPHCConsommationReponseNode);
            return reponse_x;
        }
    
    public class EstimationHPHC{
        @AuraEnabled
        public Double cleRepartitionHC;
        @AuraEnabled
        public Double cleRepartitionHP;
        public EstimationHPHC(Double cleRepartitionHC, Double cleRepartitionHP){
            this.cleRepartitionHC = cleRepartitionHC;
            this.cleRepartitionHP = cleRepartitionHP;
        }
    }
    
    public static Estimation3Cadrans preconiser3cadrans(String energieChauffageCode, String energieECSCode, String typeChauffageCode, String typeECSCode, String ctxt, String version, String NamedcredentialName){
        
        
        gdfsuezComBefChpPivot.contextDt context = VI_UTIL005_OctopusCalloutUtils.initContext(ctxt, version, false);
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port = VI_UTIL005_OctopusCalloutUtils.initConsommationPort(NamedcredentialName);
        
        // Input de la méthode d'appel HTTP:
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationInputDt input  = new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationInputDt();
        //sauvegardeDt contenu dans l'input
        gdfsuezComBefChpCalypsoConsommation.sauvegardeDt sauvegardeZoneAgile = new gdfsuezComBefChpCalypsoConsommation.sauvegardeDt();
        sauvegardeZoneAgile.entree = false;
        sauvegardeZoneAgile.sortie = false;        
        input.sauvegardeZoneAgile = sauvegardeZoneAgile;
        
        // Liste offreInDt contenue dans l'input
        gdfsuezComBefChpCalypsoConsommation.offreInDt[] donneesOffre = new gdfsuezComBefChpCalypsoConsommation.offreInDt[]{};
            
            // offreInDt à ajouter à la liste.
            gdfsuezComBefChpCalypsoConsommation.offreInDt donneeOffre = new gdfsuezComBefChpCalypsoConsommation.offreInDt();
        
        // localDt contenu dans l'input
        gdfsuezComBefChpCalypsoConsommation.localDt local = new gdfsuezComBefChpCalypsoConsommation.localDt();
        
        // Avec les paramètres d'entrée disponibles, un seul élément définisable dans "local : "listeEquipements".
        gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements listeEquipements = new gdfsuezComBefChpCalypsoConsommation.TypeListeEquipements();
        
        // Elements définissables dans listeEquipements : 
        gdfsuezComBefChpCalypsoConsommation.chauffageDt chauffage = new gdfsuezComBefChpCalypsoConsommation.chauffageDt();
        gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt eauChaudeSanitaire = new gdfsuezComBefChpCalypsoConsommation.eauChaudeSanitaireDt();
        
        // Elements définissables dans chauffage : 
        gdfsuezComBefChpPivot.listeValeursDt energieChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(energieChauffageCode);
        gdfsuezComBefChpPivot.listeValeursDt typeChauffage = VI_UTIL005_OctopusCalloutUtils.initValue(typeChauffageCode);
        
        // Elements définissables dans eauChaudeSanitaire : 
        gdfsuezComBefChpPivot.listeValeursDt energieECS = VI_UTIL005_OctopusCalloutUtils.initValue(energieECSCode);
        gdfsuezComBefChpPivot.listeValeursDt typeECS = VI_UTIL005_OctopusCalloutUtils.initValue(typeECSCode);
        
        chauffage.energieChauffage = energieChauffage;
        chauffage.typeChauffage = typeChauffage;
        eauChaudeSanitaire.energieECS = energieECS;
        eauChaudeSanitaire.typeECS = typeECS;
        listeEquipements.chauffage = chauffage;
        listeEquipements.eauChaudeSanitaire = eauChaudeSanitaire;
        local.listeEquipements = listeEquipements;
        donneeOffre.local = local;
        donneesOffre.add(donneeOffre);
        input.donneesOffre = donneesOffre;
        
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationReponse_element reponse = 
            new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationReponse_element();
        
        if(!Test.isRunningTest()){ 
            try{
                reponse = PreconiserRepartition3cadransConsommation_HTTP(input,context, port);
            }
            catch(Exception e){
                return null;
            }
        }
        else{
            // TODO : définir les mocks pour la classe test
            Test.setMock(HttpCalloutMock.class, new VI_SM018_Preconiser3cadransConso_Mock());
            gdfsuezComBefChpCalypsoConsommation.ConsommationPort porttest = new  gdfsuezComBefChpCalypsoConsommation.ConsommationPort();
            reponse = PreconiserRepartition3cadransConsommation_HTTP(input, context, porttest);
        }
        
        if(reponse != null && reponse.PreconiserRepartition3cadransConsommationOutput != null && reponse.PreconiserRepartition3cadransConsommationOutput.donneesOffre != null){
            Double cleHC;
            Double cleHP;
            Double cleWE;
            for(gdfsuezComBefChpCalypsoConsommation.offreOutDt donneeOffreOut :  reponse.PreconiserRepartition3cadransConsommationOutput.donneesOffre){
                for(gdfsuezComBefChpCalypsoConsommation.repartition3cadransDt repartition : donneeOffreOut.estimationConsoParCadran){
                    if(repartition.cadran.code == 'WE'){
                        cleWE = repartition.cleRepartition;
                    }
                    else if(repartition.cadran.code == 'HC'){
                        cleHC = repartition.cleRepartition;
                    }
                    else if(repartition.cadran.code == 'HP'){
                        cleHP = repartition.cleRepartition;
                    }
                }
            }
            Estimation3Cadrans estimation = new Estimation3Cadrans(cleHC, cleHP, cleWE);
            system.debug(estimation);
            return estimation;
        }
        else if(reponse != null && reponse.messageRetours != null && reponse.messageRetours.retourTraitementMessage != null ){ 
            for (gdfsuezComBefChpPivot.retourTraitementMessageDt message : reponse.messageRetours.retourTraitementMessage){
                if ('Erreur'.equals(message.type_x)){
                    return null;
                }
            }    
        }
        
        return null;
    }
    
    
    public static gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationReponse_element PreconiserRepartition3cadransConsommation_HTTP(
        gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationInputDt PreconiserRepartition3cadransConsommationInput,gdfsuezComBefChpPivot.contextDt context,
        gdfsuezComBefChpCalypsoConsommation.ConsommationPort port) { 
            
            DOM.Document doc = new DOM.Document();
            DOM.XmlNode body = VI_UTIL005_OctopusCalloutUtils.populateDocConso(doc);
            DOM.XmlNode methodNode = body.addChildElement('PreconiserRepartition3cadransConsommation', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3', '');
            
            gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommation_element request_x = 
                new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommation_element();
            request_x.PreconiserRepartition3cadransConsommationInput = PreconiserRepartition3cadransConsommationInput;
            request_x.context = context;
            request_x.populateXmlNode(methodNode);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(port.endpoint_x);
            //req.setClientCertificateName(Label.SM_CL_OctopusCertificate);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'text/xml');
            req.setHeader('SOAPAction', 'tns:PreconiserRepartition3cadransConsommation');
            if(port.timeout_x != null){
                req.setTimeout(port.timeout_x);
            }
            req.setBodyDocument(doc);
            
            System.debug('EDE debug, req XML body : ' + doc.toXmlString());
            
            Http http = new Http();
            HTTPResponse res = http.send(req);
            System.debug('response status Code : '+res.getStatusCode());
            System.debug('response : '+res.getBody());
            Dom.Document responseDoc = res.getBodyDocument();
            Dom.XmlNode rootNode = responseDoc.getRootElement();
            Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
            Dom.XmlNode PreconiserRepartition3cadransConsommationReponseNode = bodyNode.getChildElement('PreconiserRepartition3cadransConsommationReponse', 'http://gdfsuez.com/bef/chp/calypso/Consommation/v3');
            
            gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationReponse_element reponse_x = 
                new gdfsuezComBefChpCalypsoConsommation.PreconiserRepartition3cadransConsommationReponse_element(PreconiserRepartition3cadransConsommationReponseNode);
            
            return reponse_x;
        }
    
    public class Estimation3Cadrans{
        @AuraEnabled
        public Double cleHC;
        @AuraEnabled
        public Double cleHP;
        @AuraEnabled
        public Double cleWE;
        public Estimation3Cadrans(Double cleHC, Double cleHP, Double cleWE){
            this.cleHC = cleHC;
            this.cleHP = cleHP;
            this.cleWE = cleWE;
        }
    }
}